1
00:00:17,080 --> 00:00:120,220	
大家早上好

2
00:00:22,001 --> 00:00:23,220	
大家还没睡醒吗？

3
00:00:26,010 --> 00:00:26,580	
准备好参加好第一届DockerCon了吗?

4
00:00:27,003 --> 00:00:43,500	
首先欢迎大家来到旧金山.我知道很多人不远万里来到这里
法国、日本、俄勒冈、伦敦

5
00:00:44,003 --> 00:00:45,003	
我真的努力地记住这些地名

6
00:00:45,120 --> 00:00:47,250	
不管怎么说，欢迎所有人

7
00:00:47,070 --> 00:00:50,100	
欢迎来到这场无比精彩的大会

8
00:00:51,150 --> 00:00:52,001	
真是难以置

9
00:00:55,160 --> 00:01:00,100	
我只想说，对我本人而言，真是不可思议

10
00:01:01,100 --> 00:01:03,270	
现在我想让大家环顾四周，看看身边坐着的朋友

11
00:01:03,026 --> 00:01:05,060	
说：“嗨，早上好”

12
00:01:08,006 --> 00:01:10,050	
也可以说“谢谢你”

13
00:01:10,015 --> 00:01:15:190	
说不定就是旁边那哥们修复了卡了你好久的bug

14
00:01:16,020 --> 00:01:19,200	
或者提交了测试报告

15
00:01:20,001 --> 00:01:20,400	
引导我们去修复

16
00:01:21,022 --> 00:01:23,160	
让 Docker 越来越稳定，不经常崩溃

17
00:01:27,010 --> 00:01:28,090	
很多人我们素未谋面

18
00:01:28,007 --> 00:01:33,090	
但是我们曾整晚协作去修复bug，添加功能

19
00:01:33,010 --> 00:01:35,280	
我已经等不及要和你们见面了

20
00:01:38,024 --> 00:01:38,250	
简直难以置信

21
00:01:38,025 --> 00:01:40,140	
一年前这一切尚不存在

22
00:01:40,141 --> 00:01:43,019	
最开始只是我们几个人闲聊说要不要做开源

23
00:01:43,020 --> 00:01:45,100	
开源很 cool

24
00:01:45,100 --> 00:01:46,100	
大家表示可以

25
00:01:46,120 --> 00:01:48,180	
然后就聚起来做 Docker

26
00:01:48,260 --> 00:01:51,080	
也就这样的年代才能做这样的事情

27
00:01:54,010 --> 00:01:56,122	
感谢所有人所做的一切

28
00:01:56:124 --> 00:02:00,090	
帮助我们取得这样的成就

29
00:02:02,001 --> 00:02:02,120	
我迫不及待地想宣布会议开始了

30
00:02:03,100 --> 00:02:03,230	
那么，我们开始吧！

31
00:02:05,010 --> 00:02:07,160	
我们可爱的 CEO Ben Golub 将登台演讲

32
00:02:07,190 --> 00:02:11,180	
介绍我们齐心协力完成的这令人赞叹的工作

33
00:02:12,120 --> 00:02:16,019	
同时发布和展示一些产品

34
00:02:16,020 --> 00:02:19,060	
我将在明天演讲

35
00:02:19,200 --> 00:02:23,150	
介绍我们在做的一些新东西

36
00:02:23,155 --> 00:02:27,050	
可能需要在未来几周、几个月、甚至几年内一起努力

37
00:02:26,010 --> 00:02:32,100	
我想再次感谢大家

38
00:02:32,120 --> 00:02:38,102	
以及热烈欢迎亲爱的 Ben Golub

39
00:02:51,022 --> 00:02:53,130	
感谢大家，欢迎来到 DockerCon

40
00:02:54,010 --> 00:03:02,100	
开始今天的演讲之前，我想向刚刚站在这里的那位先生致谢

41
00:03:04,001 --> 00:03:14,010	
感谢 Solomon，正是他的想法、他的奉献、他的坚毅、
他的创造力，让这一切成为可能

42
00:03:15,001 --> 00:03:18,010	
他工作到凌晨4点，一直嚷嚷着说要为今天的演讲做好准备

43
00:03:18,020 --> 00:03:25,100	
我要从心底感谢他，感谢他所做的一切。向 Solomon 致敬

44
00:03:28,100 --> 00:03:36,100	
言归正传,二月份的时候, Docker 团队也就20个人

45
00:03:37,100 --> 00:03:46,100	
大家觉得在年中举办一场500人左右规模的大会是个不错的主意

46
00:03:46,110 --> 00:03:51,100	
然后我们又在想要不在同一天发布四个新产品

47
00:03:53,100 --> 00:03:56,100	
接下来我们又考虑能不能宣布几个重要的合作伙伴

48
00:03:56,120 --> 00:04:00,150	
重新编写培训材料, 启动 Docker University

49
00:04:01,010 --> 00:04:05,100	
在之前的周六来一场一百人的 hackathon

50
00:04:06,140 --> 00:04:11,140	
再举办一些互联网活动, 找到演讲者并且让大家齐聚一堂

51
00:04:12,010 --> 00:04:17,110	
说实话, 我当时还担心大家来不了

52
00:04:17,130 --> 00:04:22,110	
直到凌晨4点，我们才意识到,我们真的做成这件事了
感谢大家，感谢大家对这场大会的支持

53
00:04:23,110 --> 00:04:25,130	
今天注定精彩不断，明天也将精彩继续

54
00:04:26,140 --> 00:04:35,100	
老实说，当我们要售卖500张票的时候，内心其实还很忐忑

55
00:04:38,130 --> 00:04:41,110	
可一个月前我们的门票就已经售磬，现在还有400人在等待候补

56
00:04:42,010 --> 00:04:47,145	
对于这些来不了的朋友，我们真的很遗憾，
我们多方争取，不过还是没能成功

57
00:04:48,100 --> 00:04:51,100	
不过很高兴看到参会的诸位心想事成

58
00:04:51,110 --> 00:04:54,100	
说到演讲，有超过150个话题被提交，数量惊人

59
00:04:56,100 --> 00:04:57,110	
这次大会上大家能听到其中的30个话题

60
00:04:58,120 --> 00:05:05,100	
演讲者包括 Jin Kim 、 IBM 的 Ben Russell 以及其他的合作伙伴

61
00:05:06,100 --> 00:05:09,110	
我们还邀请10位嘉宾来讲述他们如何使用 Docker , 非常棒

62
00:05:12,120 --> 00:05:16,120	
今天的演讲嘉宾有来自 Rackspace 的 John Engage 
红帽的 Brian Stevens

63
00:05:17,100 --> 00:05:21,110	
我们还安排了丰富的活动，包括自助午餐、happy hour 和 after party

64
00:05:22,100 --> 00:05:25,120	
欢迎大家，希望大家尽兴

65
00:05:26,120 --> 00:05:32,110	
正如 Solomon 前面说过的， Docker 也就一年前启动

66
00:05:32,130 --> 00:05:34,140	
当时就是一个绝赞的点子

67
00:05:35,080 --> 00:05:39,100	
我很激动地和大家分享我们在过去15个月里所做的一切

68
00:05:40,100 --> 00:05:49,105	
Docker 这个伟大的想法从一开始就得到社区的大力支持，
现在有超过460位贡献者

69
00:05:50,100 --> 00:05:54,101	
成长为一个令人惊讶的平台和生态系统

70
00:05:55,010 --> 00:06:01,110	
在今天的演讲中我将谈到社区，谈到这个生态系统的用户

71
00:06:01,150 --> 00:06:05,140	
从平台到内容到支持，当然还包括我们的合作伙伴

72
00:06:06,010 --> 00:06:17,105	
他们构成了一个完整的闭环，这样的成就值得我们庆祝

73
00:06:20,110 --> 00:06:22,140	
首先要感谢所有为社区建设发展贡献力量的每个人

74
00:06:24,100 --> 00:06:27,117	
我从没见过哪个社区能像 Docker 这样发展迅猛

75
00:06:28,100 --> 00:06:30,105	
我以前说过， Docker 最开始只有15个人

76
00:06:30,120 --> 00:06:32,115	
但是现在有460个贡献者

77
00:06:33,100 --> 00:06:37,110	
我向你们保证，向投资人保证， Docker 从没雇过460个人

78
00:06:37,120 --> 00:06:45,120	
感谢你们无与伦比的贡献。你们有的贡献代码，有的人则组织 meetup

79 
00:06:46,100 --> 00:06:49,110	
我们的 meetup 遍布30多个国家的90多个城市

80
00:06:50,110 --> 00:06:57,100	
截止到今天早上，我们的docker index上已经有1万4千多个docker的镜像

81
00:06:58,100 --> 00:07:03,120	
如果你在 Github 上搜索，有超过7000个项目的名称中带有 Docker 

82
00:07:04,100 --> 00:07:06,120	
感谢你们，让我们的社区如此引人瞩目

83
00:07:12,100 --> 00:07:24,158	
由于记不住这460位贡献者的名字，我想在这里展示他们美好且富有感染力的笑容
感谢所有人

84
00:07:28,100 --> 00:07:36,110	
我也要提及我们的团队

85
00:07:37,100 --> 00:07:39,100	
最开始只有15个人，现在我们是一个42人的团队了

86
00:07:39,120 --> 00:07:47,100	
我非常荣幸能和这群无比天才、勤奋的人一起工作

87
00:07:47,110 --> 00:07:53,120	
我还要隆重介绍我们最早的雇员，宠物龟 Gordon 

88
00:07:54,100 --> 00:07:57,120	
Gordon的体重在过去的一年里也取得了里程碑式的“进步”

89
00:07:57,130 --> 00:08:03,140	
当它爬过键盘时候，它利用体重敲打代码

90
00:08:04,100 --> 00:08:06,130	
自从有了它，我终于成为编程第二差的人了

91
00:08:14,100 --> 00:08:16,120	
我们的成功立足于巨人的成果之上，我们要感谢他们

92
00:08:16,200 --> 00:08:43,100	
没有实现了Namespaces、Cgroup、Linux Kernel、SELinx、Git、
(Solaris)Zones、OpenVZ的前辈，也就不会有容器的革命。
你们是真正的巨人！

93
00:08:49,120 --> 00:08:51,130	
我也要感谢我们的用户

94
00:08:52,100 --> 00:08:57,110	
现在有超过50个用户案例，他们言语中并无不满

95
00:08:58,100 --> 00:09:07,110	
我要感谢那些即将上台分享他们使用docker的经历的演讲者们

96
00:09:07,120 --> 00:09:13,120	
今天有来自 Gilt 的 Michael

97
00:09:14,100 --> 00:09:21,130	
明天 Groupon 的伙伴们将会分享
他们如何使用 docker 改变他们代码编写、运输和运行的方式

98
00:09:22,100 --> 00:09:33,130	
尽管我们一开始就警告不要将 docker 应用于生产，
可还是有很多人勇敢地无视了这条警告。感谢你们	

99
00:09:40,100 --> 00:09:43,130	
我还要感谢我们令人赞叹的合作伙伴生态系统

100
00:09:43,140 --> 00:09:49,110	
我前面提过 Github 上超过7千个项目名称中包含 docker 

101
00:09:52,100 --> 00:10:02,100	
既有Red Hat和Rackspace这样的大公司,
他们从一开始就很信任docker，并让自家平台支持docker

102
00:10:02,201 --> 00:10:10,140	
也有很多小公司，他们开发各种工具来管理和监控docker，
创建自己的配置管理工具。非常了不起！

103
00:10:11,100 --> 00:10:14,120	
很激动能有你们加入。再次感谢！

104
00:10:22,020 --> 00:10:27,120	
我还要感谢我们的赞助商。没有你们，这一切也无从谈起。

105
00:10:29,100 --> 00:10:31,010	
这不仅仅是给大家提供pizza和日式拉面那么简单。

106
00:10:31,211 --> 00:10:36,130	
我说过周末在docker办公室举行了一场百人规模的hackathon

107
00:10:37,100 --> 00:10:41,130	
你们现在还能闻到成功和基情的味道

108
00:10:44,100 --> 00:10:54,120	
在这里单独列出这张致谢的幻灯片，
是为了感谢这些赞助商给我们的灵感和启迪

109
00:10:57,100 --> 00:11:01,100	
有的投资人好奇我们的货币化策略，我现在想告诉大家

110
00:11:01,110 --> 00:11:04,140	
受全国运动汽车竞赛协会logo的启发,我们决定启用新logo 

111
00:11:12,100 --> 00:11:24,120	
说到用户，今天Gilt的CTO、创始人Michael Bryzek会有1小时的演讲

112
00:11:24,130 --> 00:11:27,140	
明天我们也有来自 Groupon 的类似演讲

113
00:11:28,100 --> 00:11:42,130	
你要是没听过瘾，下午4点20他还有一场演讲

114
00:11:32,131 --> 00:11:34,140	
现在有请Michael 

115
00:11:40,140 --> 00:11:50,140	
在我开始今天的演讲之前我要向诸位致谢
我从没看到有项目启动会吸引这么多人

116
00:11:51,100 --> 00:11:54,100	
看看这满满一屋子人，以及即将进行的高质量的演讲

117
00:11:54,120 --> 00:11:58,100	
太了不起了，我提议所有人为Ben、Solomon和Docker团队鼓掌

118
00:12:05,110 --> 00:12:10,130	
Gilt 是一家千人左右的公司，七年前从纽约起步

119
00:12:11,100 --> 00:12:20,010	
我们让公司保持乐趣与创新，全心拥抱持续交付
将自己转变为一个时尚平台

120
00:12:20,210 --> 00:12:25,110	
我们确保能通过创新继续发展，这也是我们的重心所在

121
00:12:25,120 --> 00:12:32,130	
创新这个词变得非常时髦
我们的创新方式就是不断开发完全顺畅的软件

122
00:12:33,100 --> 00:12:37,100	
我们使用小团队，他们有权决定做什么
如何在生产中进行进行开发、部署和管理

123
00:12:37,110 --> 00:12:47,140	
我将要分享我们的一点心得。自打docker诞生，
我们就大力采用，并且效果卓著

124
00:12:48,100 --> 00:12:56,120	
在过去的两年半里，我们努力帮助公司内部这些小团队
来部署大中型商业软件

125
00:12:56,130 --> 00:13:01,105	
同时要求安全且可复制，这很困难

126
00:13:01,070 --> 00:13:09,140	
作为一个创业公司，部署好的软件万一有bug导致崩溃该怎么办?
实际上没关系，因为docker中部署的网站没有用户。不存在风险！

127
00:13:10,100 --> 00:13:14,110	
随着公司规模的扩大，你可以不断的扩充软件
发挥你的创意，享受编程的乐趣

128
00:13:15,101 --> 00:13:23,060	
在过去的2年里，团队一直在用docker部署软件，
用docker来预见我们需要什么样的服务器来部署云服务

129
00:13:23,110 --> 00:13:31,115	
同时，也利用docker去了解团队需要什么样的硬件设施，
帮助他们在扩充到更大规模的时候灵活转舵

130
00:13:31,160 --> 00:13:32,120	
在这个过程中，我们尝试了很多东西

131
00:13:32,130 --> 00:13:39,110	
最后尝试的是Cloud Saclay，由我们的工程师Alexi在cloudstack上贡献

132
00:13:39,120 --> 00:13:42,130	
到去年三月之前，我们都感觉良好

134
00:13:42,150 --> 00:13:44,135	
这时docker出现了

135
00:13:44,240 --> 00:13:56,180	
我们研究后认为这是让Gilt实现自己目标的最好方法，
我们要充满乐趣地开发灵活、可靠的软件

136
00:13:56,270 --> 00:14:03,080	
我还记得最初引入docker时，大家觉得都了无新意

137
00:14:03,150 --> 00:14:10,200	
大家都有多年管理员经验，觉得这些东西并没什么大的不同，
我们已经把所有东西都做好了

138
00:14:10,130 --> 00:14:17,230	
但是最后我们发现真是大有不同，特别是有的人开始玩docker
然后就爱上了它，彻底无视了所有的问题

139
00:14:18,010 --> 00:14:27,160	
突然之间，传统方式中的各种问题消失了，我们接下来要考虑如何进一步提高软件生产效率，
让软件开发更加安全和创新。这种转变太不可思议了！

140
00:14:27,040 --> 00:14:38,115	
在周末来dockercon的路上，我不禁在想，是不是在其他技术领域我们也有类似的反应。
一开始认为”这东西我见过啊，没什么了不起啊！”但是最终事实证明我们错了。

141
00:14:38,300 --> 00:14:41,020	
然后我想起了一些东西

142
00:14:41,110 --> 00:14:46,130	
在智能手机发明以前，摩托罗拉的Startac非常强大

143
00:14:46,251 --> 00:14:54,120	
我们有17寸笔记本电脑，配合Startac，没人需要智能手机

144
00:14:54,260 --> 00:14:58,142	
等智能手机出来了，有人说需要给它装个摄像头

145
00:14:59,100 --> 00:15:04,130	
很多人又说我们已经有照相机了干嘛要给手机加摄像头

146
00:15:04,200 --> 00:15:08,120	
但是智能手机最终还是装上了摄像头，并出现了手机拍照，
如今各种拍照软件占领了全世界的智能手机

147
00:15:08,220 --> 00:15:13,140	
其中涌现出很多超棒的新公司。在手机摄像头发明之前，
这些公司可能都不会出现

148
00:15:14,100 --> 00:15:17,120	
对我们来说，这是极其宝贵的时刻，我们能见证创新改变技术世界。

149
00:15:17,130 --> 00:15:22,170	
这些创新能让我们做的事情更加简便

150
00:15:22,220 --> 00:15:26,230	
我们能看到整个业界迅猛发展和扩张

151
00:15:27,100 --> 00:15:33,126	
第一次我们成为其中一部分，这归根于docke

152 
00:15:34,100 --> 00:15:42,100	
让我再次向 docker 致谢，感谢你们创造和带来的一切

153
00:15:49,100 --> 00:15:57,120	
非常感谢Michael，他还会和我们分享在Gilt使用docker的经历。
今天下午4点20,感兴趣的朋友可以去听

154
00:15:59,100 --> 00:16:08,105	
我们说过了社区，说过了用户，下面进入其它议题

155
00:16:08,140 --> 00:16:20,130	
docker平台的新进展。在接下来的演讲中将会有4个重要发布

156
00:16:21,100 --> 00:16:25,130	
首先让我来解释为什么要做 docker

157
00:16:26,140 --> 00:16:31,116	
回顾一下我们现在爱不释手的一些工具
它们在发明之时有三个特点

158
00:16:31,180 --> 00:16:39,139	
应用长期存在、构架单一、并且被部署到单个服务器

159
00:16:40,100 --> 00:16:55,010	
我们使用VM，努力实现单一目的
比如运行微软Exchange物理服务器、运行Mac打印机

160
00:16:55,120 --> 00:17:01,230	
于是就有了最初的想法：通过在应用服务器之间切换实现应用的切换

161
00:17:03,030 --> 00:17:05,110	
单一用途的物理服务器变成单一用途的虚拟服务器

162
00:17:05,140 --> 00:17:13,210	
然而世界已经彻底改变，要求迭代和持续的部署

163
00:17:16,100 --> 00:17:18,140	
应用采用松散的几个组件构建

164
00:17:19,030 --> 00:17:22,105	
不部署在用途单一的服务器上，而是部署在运行多种程序的服务器上

165
00:17:22,116 --> 00:17:26,140	
接下来我们发现了类似这样的问题

166
00:17:27,150 --> 00:17:40,130	
在这张图表的上方，有大量的应用，它们有不同的版本，
还使用了不同的编程语言，用各种框架松散的组合在一起

167
00:17:40,149 --> 00:17:48,130	
从开发者的笔记本到测试环境再到生产环境，在不同的部署平台上
软件都要良好的运行

168
00:17:48,231 --> 00:17:56,140	
我们也希望这些应用能通过类似OpenStack的集群实现增量
推送到云，推送到客户站点

169
00:17:57,100 --> 00:18:07,216	
图片顶部展示的这些语言、框架、应用版本、应用组件，
你希望能部署到不同的地方

170
00:18:07,117 --> 00:18:09,120	
这就是传说中的“矩阵地狱”

171
00:18:10,020 --> 00:18:22,120	
我们当然希望最上面列出来的能清晰交互
也能够与底部的这些元素无缝对接

172
00:18:23,140 --> 00:18:32,100	
我们的灵感与来自于运输业的集装箱，情况很相似

173
00:18:34,100 --> 00:18:37,100	
在全球船运业也有类似的矩阵地狱，每个需要运输的货物都装在货柜里

174
00:18:38,100 --> 00:18:42,100	
你需要操心运什么,你想要运香蕉,可隔壁的人运别的

175
00:18:42,130 --> 00:18:50,110	
你每次都需要装货卸货，船、火车、卡车和起重机通通用上，真是一团乱麻

176
00:18:51,100 --> 00:18:58,120	

一夜之间，世界变了，我们用大小一样的集装箱，每个盒子的相同位置还都有一个洞

177
00:18:58,140 --> 00:19:05,115	
全球95%的货物在离开工厂前就被装进了集装箱里并且密封好

178
00:19:05,120 --> 00:19:08,130	
到达最终目的地才被打开

179
00:19:08,160 --> 00:19:12,120	
这些集装箱通过船、火车、卡车运输

180
00:19:12,130 --> 00:19:20,113	
集装箱的委托方无需理会怎么运输，使用哪些运输方式

181
00:19:20,220 --> 00:19:23,105	
集装箱的承运方则不需要知道运什么

182
00:19:24,100 --> 00:19:25,100	
这是运输业的革命！

183
00:19:26,100 --> 00:19:33,150	
比把应用从一个数据中心迁移到另一个数据中心，
环球运输车辆部件要更容易

184
00:19:34,100 --> 00:19:35,140	
我们认为数据迁移也应该如此

185
00:19:38,100 --> 00:19:40,120	
我们一直讲docker是个引擎

186
00:19:41,100 --> 00:19:54,120	
回顾刚才的那张幻灯片，你会理解一个应用程序
如何从概念到建立到管理以及迁移，这些完全与硬件无关

187
00:19:55,130 --> 00:19:58,140	
当你摆脱了操作系统的束缚，效率会大幅度提高

188
00:19:59,100 --> 00:20:07,116	
今天Russuel会在演讲中提到密度以20%到40%的速度增加
速度也以相同比例加快。相当酷炫。

189
00:20:07,140 --> 00:20:12,230	
不过我认为最有启发的是Michael的演讲

190
00:20:12,135 --> 00:20:23,127	
我们要解放开发者，我们不想让他们浪费一半的时间
去思考如何构建应用、部署在哪里

191
00:20:23,230 --> 00:20:27,120	
我们希望他们能将自己的时间和精力专注在自己感兴趣的事情上
创造令人惊奇的应用

192
00:20:27,130 --> 00:20:37,115	
系统管理员则可以关注如何让应用更加强大、可扩展

193
00:20:37,200 --> 00:20:46,158	
构建自己想要的基础设施，从琐碎之事中解脱出来

194
00:20:47,100 --> 00:20:54,120	
Docker不仅仅意味着自动化和高效
也是一个庞大的生态系统和平台

195
00:20:54,150 --> 00:20:56,130	
在现实世界中并不只有集装箱

196
00:20:57,010 --> 00:21:03,200	
轮船、火车、卡车、起重机也同样重要

197
00:21:03,130 --> 00:21:06,230	
在docker的世界里，我们也想这么做

198
00:21:07,100 --> 00:21:10,130	
回顾docker的历史，我们一直把它看作是个引擎

199
00:21:11,100 --> 00:21:27,140	
人们把它当作工具，应用于软件的生命周期中，
高效地运输到云端、数据中心。

200
00:21:28,100 --> 00:21:33,120	
当看到github上7千多个基于docker的库
以及1万4千多个docker镜像的时候

201
00:21:34,100 --> 00:21:37,120	
我们意识到docker不仅仅是一个引擎，它可以是一个平台

202
00:21:37,240 --> 00:21:40,360	
从现在开始，我们将谈论作为平台的docker

203
00:21:40,308 --> 00:21:43,240	
构建、运输和运行分布式应用程序

204
00:21:44,100 --> 00:21:45,120	
我接下来将逐一介绍

205
00:21:46,010 --> 00:21:48,120	
首先，我们是个开放平台

206
00:21:49,010 --> 00:21:56,240	
其中有人人都爱的引擎，创建于一年前
今天我们介绍与之配套的Hub

207
00:21:56,341 --> 00:22:04,100	
这是一个基于云的平台
提供与内容、社区、协作、工作流有关的各种服务

208
00:22:04,200 --> 00:22:06,300	
引擎和Hub都提供API

209
00:22:07,100 --> 00:22:11,110	
开放API能让你创建容器

210
00:22:12,100 --> 00:22:21,130	
在任何基础设施上（物理服务器、虚拟服务器还、云服务器）
使用Hub里的各种工具，运行各种应用 

211
00:22:21,241 --> 00:22:26,140	
作为开放平台，在我们之上会有各种应用竞争。太棒了！

212
00:22:26,150 --> 00:22:34,130	
作为一家公司，除了提供商业产品，我们更看重良好的生态系统。

213
00:22:35,010 --> 00:22:40,020	
我们认为引擎和Hub一起使用效果拔群

214
00:22:40,123 --> 00:22:42,110	
当然你也可以单独使用它们

215
00:22:43,010 --> 00:22:45,240	
不过我想你们看过hub的演示后，就不会那样做

216
00:22:48,340 --> 00:22:55,120	
在这张图中，绿色的是引擎，蓝色的是hub，其它颜色是市场部门

217
00:22:57,100 --> 00:23:07,110	
你看到的将不止是幻灯片上展示的这些

218
00:23:07,120 --> 00:23:11,120	
我们的团队将会演示左边列出的部分

219
00:23:11,230 --> 00:23:17,100	
演示如何构建一个应用程序

220
00:23:17,120 --> 00:23:31,120	
从registry中构建一个基础应用，从修改应用、添加注释、
提交源代码、开发、QA、再到重新发布到registry

221
00:23:31,230 --> 00:23:37,220	
一旦发布，应用就可以通过同一容器运行在任何基础设施上
没有修改或延迟

222
00:23:38,010 --> 00:23:44,240	
我们真的改变了应用管理的观念,将其与基础设施管理剥离

223
00:23:46,010 --> 00:23:48,230	
同一个容器可以运行在任何地方

224
00:23:49,010 --> 00:23:54,120	
如果你理想的基础设施是运行RedHat的商用服务器，那很赞！

225
00:23:54,230 --> 00:23:57,200	
如果你理想的基础设施是一个OpenStack集群，那也很赞！

226
00:23:58,010 --> 00:24:02,100	
如果你理想的基础设施是一堆虚拟机，那也一样赞！

227
00:24:02,130 --> 00:24:11,400	
如果你选择了第三方的基础设施
比如Rackspace、Google、Amazon、Softlayer，那也非常赞！

228
00:24:11,410 --> 00:24:14,500	
甚至是好顶赞！你可以从容地在它们之间迁移组合。

229
00:24:15,500 --> 00:24:18,120	
最后是分布式应用

230
00:24:18,220 --> 00:24:23,100	
这个其实是Solomon的话题，不过我还是先透露一小点

231
00:24:23:120 --> 00:24:31,200	
所有的组件可以彼此互动，并与物理基础设施交互，
以及所有的这些容器如何交互。

232
00:24:31,320 --> 00:24:43,100	
Solomon和我明天会详细介绍我们开发的新工具
能够构架容器、创建可信容器、把容器连结起来

233
00:24:43,110 --> 00:24:46,200	
同时让大家理解它们如何在不同的基础设施上运行

234
00:24:47,001 --> 00:24:52,300	
说了一些技术，现在我来发布一些产品，不知道你猜对没有

235
00:24:53,001 --> 00:24:57,001	
首先是最受大家期待和喜爱的docker 1.0今天正式发布！

236
00:25:08,001 --> 00:25:13,001	
这个版本已经为生产做好准备。现在是时候撤掉那些警告了！

237
00:25:15,001 --> 00:25:20,201	
1.0版本最重要的功能是产品质量

238
00:25:21,300 --> 00:25:26,200	
之前发布的一系列版本中我们就强调了产品质量

239
00:25:26,230 --> 00:25:29,300	
我记得光在上个月就有300次提交、合并

240
00:25:31,000 --> 00:25:33,100	
Docker现在也有了一个非常稳定的内核

241
00:25:33,200 --> 00:25:42,100	
其实在发布0.6的时候我们就重视版本的向后兼容性了

242
00:25:44,000 --> 00:25:49,100	
我们也一直致力于无需改变代码就能改变插件的性质

243
00:25:49,200 --> 00:25:55,200	
Docker现在不仅有了稳定的内核
还运行在主要的Linux平台和版本上

244
00:25:55,210 --> 00:25:59,590	
并且还有插件能让我们灵活地执行文件系统

245
00:26:00,000 --> 00:26:11,200	
我们还和合作伙伴一起把网络安全以及授权方面的功能
提高到生产级别

246
00:26:12,000 --> 00:26:17,300	
感谢大家的支持，我们才能发布这一里程碑版本。
警告彻底失效！

247
00:26:24,000 --> 00:26:27,300	
Hub 1.0今天也正式发布

248
00:26:27,310 --> 00:26:34,200	
围绕用户、社区、协作和工作流，Hub提供了大量功能

249
00:26:36,000 --> 00:26:41,200	
免费注册用户可以任意创建免费的代码库，还可以创建团队

250
00:26:42,000 --> 00:26:47,300	
现在hub的公共registry里有超过15000个免费应用

251
00:26:49,000 --> 00:26:54,300	
我们还会提供私有仓库，为付费用户提供私有仓库托管服务

252
00:26:54,310 --> 00:26:57,100	
所有用户都会得到一个私有仓库

253
00:26:58,000 --> 00:27:09,300	
会有一个非常赞的工具，包括控制台、个人页面、验证、自动化构建，
与Github和Bitbucket等整合。

254
00:27:10,000 --> 00:27:13,000	
我们会提供为第三方工具和服务提供API

255
00:27:14,000 --> 00:27:17,300	
在这个演讲的最后部分，你会看到现场演示

256
00:27:20,000 --> 00:27:22,200	
接下来发布官方仓库计划 

257
00:27:23,000 --> 00:27:26,400	
你可能不想在15000个应用中搜索

258
00:27:27,000 --> 00:27:35,200	
于是我们启动了官方仓库计划，它们自动生成，可回溯源代码

259
00:27:36,000 --> 00:27:40,200	
大多数发布者同意维护并保证质量

260
00:27:40,300 --> 00:27:47,500	
用户可以免费从docker hub的仓库中获取这些程序
官方也会帮助用户使用这些应用

261
00:27:48,000 --> 00:27:51,200	
最后我们要发布商业支持计划

262
00:27:52,000 --> 00:27:56,200	
我们认为有必要给docker的技术支持服务做广告

263
00:27:57,000 --> 00:27:59,400	
然后这就是我们技术支持团队的庐山真面目

264
00:28:09,000 --> 00:28:12,300	
我们真的很高兴能提供服务

265
00:28:13,000 --> 00:28:15,400	
并且他们真的很棒，值得信赖

266
00:28:18,000 --> 00:28:26,300	
1.0版本的长期支持时间是12个月

267
00:28:26,310 --> 00:28:34,200	
付费用户或者直接接受这些绅士们的服务
或通过一个庞大的网络来获得支持

268
00:28:34,400 --> 00:28:38,000	
对于刚刚了解docker的人来说我们也有入门计划

269
00:28:38,100 --> 00:28:44,400	
谈及商业伙伴，我们很高兴有10个大型系统集成商与我们合作

270
00:28:45,000 --> 00:28:54,300	
他们已经部署了docker并且真切了解docker

271
00:28:54,450 --> 00:28:59,200	
也有CICD用户案，并具备在生产中进行扩展的能力

272
00:29:00,000 --> 00:29:00,400	
现在，演示时间！

273
00:29:01,000 --> 00:29:10,300	
现在有请我们的产品副总裁Scott Johnston
和工程总监Sam Alba上台讲解docker hub

274
00:29:10,310 --> 00:29:17,300	
为了演示顺利，我决定给Demo之神献上一点儿小祭品，
以博得他的欢心

275
00:29:19,000 --> 00:29:23,400	
Scott和Sam，加油！

276
00:29:24,000 --> 00:29:27,400	
是不是用人献祭会更有诚意？（Scott你要不要这么狠）

277
00:29:30,000 --> 00:29:37,400	
Sam和我很高兴能进行现场演示
我们认为这是一个非常有用的docker平台用例

278
00:29:38,000 --> 00:29:43,100	
创建一个自动化的流水线去打造和运行应用程序

279
00:29:43,300 --> 00:29:49,300	
我们用一个python web应用来发布简单的hello world信息

280
00:29:50,000 --> 00:29:58,300	
重点强调其中的几个环节：代码、构建、测试、部署

281
00:29:59,000 --> 00:30:02,300	
也是对刚才ben提到的docker引擎和hub绝佳的演示

282
00:30:03,000 --> 00:30:07,200	
现在切换到我的笔记本，看看相关设置

283
00:30:09,000 --> 00:30:13,000	
如果你首次登录docker hub,你会看到全新的控制台

284
00:30:14,000 --> 00:30:19,200	
列出所有信息：docker服务、团队协作等

285
00:30:20,000 --> 00:30:26,400	
在上方你会我看我创建和维护的仓库

286
00:30:26,410 --> 00:30:34,100	
左边一列会看到我贡献的仓库，包括我所属的团队
我的协作、以及动态更新

287
00:30:35,000 --> 00:30:41,400	
右边的加星仓库里，这些项目我可能没有贡献	

288
00:30:41,430 --> 00:30:48,200	
但是他们的工作对我意义重大，所以我给他们用星号标注
这样可以密切了解他们的进展

289
00:30:49,200 --> 00:30:52,200	
在底部你会看到各种活动动态

290
00:30:52,220 --> 00:30:59,300	
列出docker hub里与我有关的所有进展，以信息流的形式呈现

291
00:31:00,010 --> 00:31:03,200	
在左侧这里，你会看到私有仓库

292
00:31:03,210 --> 00:31:10,100	
你能看到还有多少个私有仓库可用、消耗了多少个

293
00:31:10,200 --> 00:31:12,000	
也能让你轻松购买更多仓库

294
00:31:13,000 --> 00:31:28,300	
今天Ben宣布所有的免费用户都会得到一个私有仓库，完全免费。
我想大家又能忙活一阵了

295
00:31:33,200 --> 00:31:39,400	
你会发现页面的左侧类似导航

296
00:31:40,000 --> 00:31:45,200	
面向不同的用户，以及可用的仓库

297
00:31:46,000 --> 00:31:56,105	
我将展示新功能。你可以登录自己的个人帐号，查看自己的仓库和服务

298
00:31:57,000 --> 00:32:01,100	
今天我们推出机构帐号和组帐号

299
00:31:01,110 --> 00:32:06,200	
让你以一种全新的方式管理组织和各个团队的工作流

300
00:32:09,000 --> 00:32:15,000	
我们在docker机构内创建了一个dockercon的应用

301
00:32:16,000 --> 00:32:21,100	
这里有一个 demo-app

302
00:32:21,130 --> 00:32:25,100	
我们现在点进去这个仓库，就是这样

303
00:32:26,500 --> 00:32:32,200	
代码、构建、测试、部署。第一步是代码

304
00:32:33,000 --> 00:32:37,100	
所以首先向代码库提交代码变动

305
00:32:37,200 --> 00:32:43,300	
Ben提到已经实现了对github和Bitbucket的支持。点赞！

306
00:32:49,000 --> 00:32:55,100	
刚刚那是第一步，第二步就是自动构建

307
00:32:55,110 --> 00:33:03,200	
在docker hub里，一旦向源代码库提交代码，就会促发自动构建

308
00:33:03,210 --> 00:33:11,198	
在一分钟之内就可以构建和展示新image，再提交回仓库

309
00:33:11,200 --> 00:33:16,000	
自动构建以前仅面向公共免费仓库

310
00:33:16,030 --> 00:33:24,400	
今天起私有仓库也可以使用这个酷炫的功能了。好顶赞！

311
00:33:30,000 --> 00:33:34,200	
对于dockerfile估计你们很多人都不陌生

312
00:33:34,220 --> 00:33:41,200	
不过我们还是提供了一个非常简单的安装说明
指导你如何一层一层地构建自己的应用

313
00:33:41,300 --> 00:33:49,100	
我不会逐行解释，但想强调一下第一行——基础image

314
00:33:49,120 --> 00:33:55,100	
由Michael Crosby贡献，他是docker员工，docker引擎核心维护者

315
00:33:55,110 --> 00:33:58,100	
请大家为他喝彩

316
00:34:02,000 --> 00:34:09,300	
这里我们不需要从头开始创建镜像（包括系统啊、Python环境啊）

317
00:34:09,400 --> 00:34:16,100	
Michael已经构建好了一个优化堆栈，包括操作系统，包括Python栈

318
00:34:18,000 --> 00:34:22,100	
我们不需要自己去发明轮子，只需要继续Michael的伟大工作

319
00:34:22,110 --> 00:34:33,100	
包括这个基础image，节约了很多时间，也避免了出现新bug的风险

320
00:34:33,110 --> 00:34:35,500	
现在继续回到docker hub

321
00:34:36,000 --> 00:34:48,100	
现在有15000个由社区贡献的免费应用

322
00:34:48,120 --> 00:34:51,100	
不过今天早上我们推出了官方仓库计划

323
00:34:51,110 --> 00:35:06,100	
这些伟大的开发者和维护者包括
Red Hat、CentOS、Fedora、NGIN X等等	

324
00:35:06,190 --> 00:35:15,400	
他们将切实维护自己在docker hub里的image
确保时刻打补丁和更新,提供最新最好的服务

325
00:35:16,000 --> 00:35:25,100	
最棒的是这些和你的组件、堆栈一样，完全免费	

326
00:35:32,100 --> 00:35:38,100	
回到我们的demo-app仓库，代码和构建之后，下一步是测试

327
00:35:38,200 --> 00:35:43,300	
当自动构建被触发后会接下来是什么呢？webhook

328
00:35:44,000 --> 00:35:53,100	
webhook会触发Jenkins，然后Jenkins会自动从仓库pull image

329
00:35:53,110 --> 00:35:58,200	
在docker容器中自动运行，在Jenkins环境下自动测试

330
00:35:58,210 --> 00:36:03,100	
经过状态检查再返回到docker hub 

331
00:36:03,110 --> 00:36:14,400	
docker hub会根据测试情况，ping四个不同的云平台上的docker引擎

332
00:36:15,000 --> 00:36:22,100	
告诉它们去pull相同的image，并且运行起来

333
00:36:23,000 --> 00:36:25,100	
代码、构建、测试、部署，我们都讲过了

334
00:36:26,000 --> 00:36:27,100	
现在该拉出来检验一下了

335
00:36:27,400 --> 00:36:28,100	
说做就做！（来自Sam的应答）

336
00:36:29,000 --> 00:36:33,400	
来啊！来啊！（群众的呼声好热烈）

337
00:36:34,000 --> 00:36:52,400	
稍微改一下，hello dockercon！点击提交，现在开始了

338
00:36:58,000 --> 00:37:05,000	
Sam还不是dockercon group成员，
我要把他添加进组里方便他操作在这次demo

339
00:37:05,010 --> 00:37:12,300	
他整整一周都缠着我，看在这个Python应用的份上我答应了

340
00:37:13,000 --> 00:37:19,000	
现在转到Sam的电脑上，看看他能不能加入我的群组

341
00:37:19,001 --> 00:37:29,020	
终于加进来了。现在我能看到dockercon的所有信息，
看到demo-app了。

342
00:37:29,300 --> 00:37:35,100	
太棒了，现在应用程序差不多快创建好了，你可以用起来了

343
00:37:35,110 --> 00:37:37,100	
现在是我的笔记本

344
00:37:38,120 --> 00:37:47,100	
我们看到app正在构建，启动了Jenkins构建

345
00:37:48,000 --> 00:37:52,300	
Jenkins继续构建

346
00:37:53,000 --> 00:37:57,200	
Sam，看看能不能从你那边pull应用

347
00:37:58,000 --> 00:38:07,100	
Jenkins将构建返回到docker hub，Sam将pull测试image

348
00:38:07,200 --> 00:38:09,100	
现在切到Sam的笔记本电脑

349
00:38:10,000 --> 00:38:15,200	
该我们上场了，我指demo和image。我现在pull image

350
00:38:20,000 --> 00:38:26,100	
在我的Mac上本地运行boot2docker

351
00:38:26,110 --> 00:38:29,200	
我通过这种方法运行容器

352
00:38:30,200 --> 00:38:32,300	
这个app太赞了！

353
00:38:32,110 --> 00:38:40,100	
现在通过我的电脑，我们能看到云平台上的进展

354
00:38:41,200 --> 00:38:47,200	
IBM的Softlayer完成，Google Computer Engine也完成

355
00:38:47,210 --> 00:38:55,000	
我们看到 Amazon 和 Rackspace 也完成了

356
00:38:57,000 --> 00:38:58,300	
现在该打招呼了

357
00:38:59,000 --> 00:39:00,300	
Hello Dockercon 来自 IMBSoftlayer！

358
00:39:01,000 --> 00:39:02,200 	
Google！

359
00:39:02,310 --> 00:39:04,100	
Amazon！

360
00:39:04,200 --> 00:39:06,500	
还有Rackspace！

361
00:39:18,400 --> 00:39:30,200	
这个简单的示例告诉我们，通过docker引擎和docker Hub，
能够完整地实现代码、构建、测试和部署

362
00:39:30,210 --> 00:39:40,300	
在最后一步，我们pull相同的 image到4个（其实是5个）不同的环境

363
00:39:40,500 --> 00:39:46,300	
没有任何变化，不会因为是pull到云上还是笔记本上而有所不同

364
00:39:47,000 --> 00:40:02,300	
通过刚刚的演示，很容易在CloudFoundry、OpenShift、
OpenStack、ubuntu任何一个平台上托管docker引擎

365
00:40:03,000 --> 00:40:05,400	
我很快结束自己的发言

366
00:40:06,000 --> 00:40:14,200	
docker平台确实能帮助团队来打造出色的应用,更快更环保

367
00:40:14,220 --> 00:40:17,300	
我要强调几个主要功能。首先是内容

368
00:40:17,310 --> 00:40:25,300	
除了现有的1万5千个应用，今天又增加了两个

369
00:40:26,000 --> 00:40:34,100	
其次是协作，不仅仅是个人用户之间，也面向机构和组，
让你更加轻松从容

370
00:40:35,000 --> 00:40:42,400	
再次，自动构建和webhook构成的工作流，
能够自动完成那些简单重复的工作

371
00:40:43,000 --> 00:40:47,100	
最后就是相同image可同时向多个平台推送，无论何时何地

372
00:40:47,110 --> 00:40:52,200	
你可以使用相同的环境来运行程序，
不必理会自己的机器和托管平台的差异

373
00:40:54,000 --> 00:40:58,100	

谢谢大家的关注！现在把会场交回给Ben

374
00:41:09,400 --> 00:41:16,200	
我觉得有必要强调一点
在不久的将来会有更多关于docker hub的新东西

375
00:41:10,000 --> 00:41:28,000	
欢迎大家来我们的大展位看看。明天Solomon将会谈论我们的将来，
包括可信任的集群式构建

376
00:41:29,000 --> 00:41:32,000	
今天一大议程就是我们的合作伙伴

377
00:41:32,100 --> 00:41:35,000	
他们对我们意义非凡

378
00:41:36,500 --> 00:41:44,100	
正如前面所讲我们已经是一个高质量的大型生态系统了

379
00:41:44,120 --> 00:42:00,200	
我们鼓励和吸收已有的工具,比如Chef、Puppet、Jenkins，
无论是操作系统还是服务供应商

380
00:42:01,500 --> 00:42:05,200	
任何人开发的新工具我们都非常欢迎，这是一个好现象	

381
00:42:06,000 --> 00:42:09,100	
接下来的两位演讲者代表了这个生态系统

382
00:42:10,000 --> 00:42:13,100	
我个人非常高兴他们能来

383
00:42:13,130 --> 00:42:16,200	
他们来自Red Hat和Rackspace

384
00:42:16,210 --> 00:42:20,200	
他们之所以重要，主要有两点原因

385
00:42:21,400 --> 00:42:33,200	
他们在docker早期就对docker充满信心，
很早就在内部使用docker

386
00:42:34,000 --> 00:42:41,200	
还有一点他们最早接触docker的时候不谈合同不谈需求，
只关注代码

387       
00:42:43,000 --> 00:42:46,100	
现在有请来自Rackspace的John Engage

	


	








	



